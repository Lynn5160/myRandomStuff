/*
The MIT License (MIT)

Copyright (c) 2015 Mack Stone

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

/*
A normal map shader from
http://learnopengl.com/#!Advanced-Lighting/Normal-Mapping
*/


// uniform mat4 wvp   : WorldViewProjection     < string UIWidget="None"; >;
uniform mat4 world      : World                   < string UIWidget="None"; >;
uniform mat4 view       : View                    < string UIWidget="None"; >;
uniform mat4 projection : Projection              < string UIWidget="None"; >;

uniform mat4 wit        : WorldInverseTranspose   < string UIWidget="None"; >;
uniform mat4 viewI : ViewInverse             < string UIWidget="None"; >;


// parameters section
uniform bool Parallax = true;

uniform float height_scale
<
    float UIMin = 0.0;
    float UIMax= 99.0;
    float UIStep = 1.0;
    string UIName = "Height Scale";
> = 3.0;

// light
uniform vec3 Light0Pos : POSITION
<
	string UIName = "Light 0 Position";
	string Space = "World";
	string Object = "Light 0";
> = {1.0, 1.0, 1.0};

uniform vec3 Light0Dir : DIRECTION
<
    string UIName = "Light 0 Direction";
    string Space = "World";
    string Object = "Light 0";
> = {0.0, -1.0, 0.0};


// textures
uniform texture2D diffuseMap
<
    //Specify the texture file to be loaded by default
    string ResourceName = "bricks2.jpg";

    //Specify the type of texture
    string ResourceType = "2D";

    string UIName = "Diffuse Map";
>;

uniform texture2D normalMap
<
    //Specify the texture file to be loaded by default
    string ResourceName = "bricks2_normal.jpg";

    //Specify the type of texture
    string ResourceType = "2D";

    string UIName = "Normal Map";
>;

uniform texture2D depthMap
<
    //Specify the texture file to be loaded by default
    string ResourceName = "bricks2_disp.jpg";

    //Specify the type of texture
    string ResourceType = "2D";

    string UIName = "Depth Map";
>;

uniform sampler2D diffuseMapSampler = sampler_state
{
    Texture = <diffuseMap>;
    TEXTURE_MIN_FILTER = LINEAR;
    TEXTURE_MAG_FILTER = LINEAR;
    TEXTURE_WRAP_S = REPEAT;
    TEXTURE_WRAP_T = REPEAT;
    TEXTURE_WRAP_R = REPEAT;
};

uniform sampler2D normalMapSampler = sampler_state
{
    Texture = <normalMap>;
    TEXTURE_MIN_FILTER = LINEAR;
    TEXTURE_MAG_FILTER = LINEAR;
    TEXTURE_WRAP_S = REPEAT;
    TEXTURE_WRAP_T = REPEAT;
    TEXTURE_WRAP_R = REPEAT;
};

uniform sampler2D depthMapSampler = sampler_state
{
    Texture = <depthMap>;
    TEXTURE_MIN_FILTER = LINEAR;
    TEXTURE_MAG_FILTER = LINEAR;
    TEXTURE_WRAP_S = REPEAT;
    TEXTURE_WRAP_T = REPEAT;
    TEXTURE_WRAP_R = REPEAT;
};


//------------------------------------
// Attributes
//------------------------------------
// input from application
attribute appIn
{
    vec3 inPosition   :  POSITION;
    vec2 inUV         :  TEXCOORD0;
    vec3 inNormal     :  NORMAL;
    vec3 inTangent    :  TANGENT;
    vec3 inBiTangent  :  BITANGENT;
}

// ouput from vertex shader
// input to pixel shader
attribute vsOut
{
    // vec3 worldNormal   :  NORMAL;
    vec2 outUV           :  TEXCOORD0;
    // vec3 fragPos         :  TEXCOORD1;
    // vec3 tangentLightPos :  TEXCOORD2;
    // vec3 tangentViewPos  :  TEXCOORD3;
    // vec3 tangentFragPos  :  TEXCOORD4;
}

// output to pixel shader
attribute pixelOut
{
    vec4 outColor   :  COLOR0;
}

//------------------------------------
// vertex shader
//------------------------------------
GLSLShader VS
{
    void main()
    {
        vec3 cameraPos = viewI[3].xyz; // view pos
        // fragPos = vec3(world * vec4(inPosition, 1.0));
        outUV = inUV;

        mat3 normalMatrix = mat3(wit);
        vec3 T = normalize(normalMatrix * inTangent);
        vec3 B = normalize(normalMatrix * inBiTangent);
        vec3 N = normalize(normalMatrix * inNormal);

        // mat3 TBN = transpose(mat3(T, B, N));
        // tangentLightPos = TBN * Light0Pos;
        // tangentViewPos = TBN * cameraPos;
        // tangentFragPos = TBN * fragPos;

        // worldNormal = mat3(wit) * inNormal;
        gl_Position = projection * view * world * vec4(inPosition, 1.0);
    }
}


//------------------------------------
// pixel shader
//------------------------------------
GLSLShader FS
{
    vec2 ParallaxMapping(vec2 texCoords, vec3 viewDir)
    {
        //vec3 viewDir = viewI[3].xyz;
        
        // number of depth layers
        const float minLayers = 8;
        const float maxLayers = 32;
        float numLayers = mix(maxLayers, minLayers, abs(dot(vec3(0.0, 0.0, 1.0), viewDir)));
        // calculate the size of each layer
        float layerDepth = 1.0 / numLayers;
        // depth of current layer
        float currentLayerDepth = 0.0;
        // the amount to shift the texture coordinates per layer (from vector P)
        vec2 P = viewDir.xy / viewDir.z * height_scale;
        vec2 deltaTexCoords = P / numLayers;
        
        // get initial values
        vec2  currentTexCoords = texCoords;
        float currentDepthMapValue = texture(depthMapSampler, currentTexCoords).r;
        
        while(currentLayerDepth < currentDepthMapValue)
        {
            // shift texture coordinates along direction of P
            currentTexCoords -= deltaTexCoords;
            // get depthmap value at current texture coordinates
            currentDepthMapValue = texture(depthMapSampler, currentTexCoords).r;  
            // get depth of next layer
            currentLayerDepth += layerDepth;  
        }
        
        // -- parallax occlusion mapping interpolation from here on
        // get texture coordinates before collision (reverse operations)
        vec2 prevTexCoords = currentTexCoords + deltaTexCoords;
        
        // get depth after and before collision for linear interpolation
        float afterDepth  = currentDepthMapValue - currentLayerDepth;
        float beforeDepth = texture(depthMapSampler, prevTexCoords).r - currentLayerDepth + layerDepth;
        
        // interpolation of texture coordinates
        float weight = afterDepth / (afterDepth - beforeDepth);
        vec2 finalTexCoords = prevTexCoords * weight + currentTexCoords * (1.0 - weight);
        return finalTexCoords;
    }
    
    void main()
    {
        // Offset texture coordinates with Parallax Mapping
        vec2 texCoords = vec2(outUV.x, 1 - outUV.y);
        if(Parallax)
            // texCoords = ParallaxMapping(vec2(outUV.x, 1 - outUV.y), viewI[3].xyz);
            texCoords = ParallaxMapping(outUV, viewI[3].xyz);
        
        if(texCoords.x > 1.0 || texCoords.y > 1.0 || texCoords.x < 0.0 || texCoords.y < 0.0)
            discard;
            
        // Obtain normal from normal map in range [0,1]
        vec3 normal = texture(normalMapSampler, texCoords).rgb;
        // Transform normal vector to range [-1, 1]
        normal = normalize(normal * 2.0 - 1.0); // this normal is in tangent space

        // Get diffuse color
        vec3 color = texture(diffuseMapSampler, texCoords).rgb;
        // Ambient
        vec3 ambient = 0.1 * color;
        // Diffuse
        float diff = max(dot(Light0Dir, normal), 0.0);
        vec3 diffuse = diff * color;
        // Specular
        vec3 reflectDir = reflect(-Light0Dir, normal);
        vec3 halfwayDir = normalize(Light0Dir + viewI[3].xyz);
        float spec = pow(max(dot(normal, halfwayDir), 0.0), 32.0);
        vec3 specular = vec3(0.2) * spec;

        outColor = vec4(ambient + diffuse + specular, 1.0);
        // outColor = vec4(1.0, 0.0, 0.0, 1.0);
    }
}

technique Simple
{
    pass p0
    {
        VertexShader (in appIn, out vsOut) = VS;
        PixelShader (in vsOut, out pixelOut) = FS;
    }
}
