/*
The MIT License (MIT)

Copyright (c) 2015 Mack Stone

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/


uniform mat4 wvp : WorldViewProjection     < string UIWidget="None"; >;
uniform mat4 wit : WorldInverseTranspose   < string UIWidget="None"; >;

// parameters section
uniform vec3 diffuse_color : Diffuse
<
    string UIName = "Diffuse";
> = {1.0, 1.0, 1.0};

uniform vec3 ambient_color : Diffuse
<
    string UIName = "Ambient";
> = {0.1, 0.1, 0.1};

// // light direction
uniform vec3 Light0Dir : DIRECTION
<
    string UIName = "Light 0 Direction";
    string Space = "World";
    string Object = "Light 0";
> = {0.0, -1.0, 0.0};


//------------------------------------
// Attributes
//------------------------------------
// input from application
attribute appIn
{
    vec3 inPosition  :  POSITION;
    vec3 inNormal    :  NORMAL;
}

// ouput from vertex shader
// input to pixel shader
attribute vsOut
{
    vec3 worldNormal   :  NORMAL;
}

// output to pixel shader
attribute pixelOut
{
    vec4 outColor   :  COLOR0;
}


//------------------------------------
// vertex shader
//------------------------------------
GLSLShader VS
{
    void main()
    {
        worldNormal = mat3(wit) * inNormal;
        gl_Position = wvp * vec4(inPosition, 1.0);
    }
}


//------------------------------------
// pixel shader
//------------------------------------
GLSLShader FS
{
    void main()
    {
        vec3 wNormal = normalize(worldNormal);
        vec3 lightDir = normalize(-Light0Dir);
        
        float lambert = clamp(dot(lightDir, wNormal), 0.0, 1.0);
        
        vec3 color = diffuse_color * (ambient_color + lambert);
        outColor = vec4(color, 1.0);
        // outColor = vec4(1.0, 0.0, 0.0, 1.0);
    }
}

technique Simple
{
    pass p0
    {
        VertexShader (in appIn, out vsOut) = VS;
        PixelShader (in vsOut, out pixelOut) = FS;
    }
}